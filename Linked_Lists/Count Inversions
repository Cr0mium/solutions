//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

typedef long long ll;

class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    
    ll merge(vector<ll> &a,ll l,ll r)
    {
        ll cnt=0;
        ll mid=(l+r)/2;
        int i=l,j=mid;
        vector<ll> v;
        while(i< mid && j<r)
        {
            if(a[i]<=a[j])
                v.push_back(a[i++]);
            else
            {
                v.push_back(a[j++]);
                cnt+=(mid-i);
            }
        }
        while(i<mid)
        {
                v.push_back(a[i++]);
        }
        while(j<r)
        {
                v.push_back(a[j++]);
        }
        for(int i=0;i<v.size();++i)
        {
            a[l+i]=v[i];
        }
        return cnt;
        
    }
    
    
    ll merge_sort(vector<ll> &a,ll left,ll right)
    {
        if(right==left+1) return 0;
        ll cnt=0;
        ll mid=(left+right)/2;
        cnt+=merge_sort(a,left,mid);
        cnt+=merge_sort(a,mid,right);
        cnt+= merge(a,left,right);
        return cnt;
        
    }
    
    
    long long int inversionCount(long long arr[], long long N)
    {
        vector<ll> a;
        for(int i=0;i<N;++i)
            a.push_back(arr[i]);
        ll cnt= merge_sort(a,0,N);
        //for(auto it:a) cout<<it<<' ';
        return cnt;
    }

};

//{ Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}

// } Driver Code Ends
